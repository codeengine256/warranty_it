name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Run tests and linting for both backend and frontend
  tests:
    name: Tests & Linting
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Run code quality checks
  code-quality:
    name: Code Quality
    uses: ./.github/workflows/code-quality.yml
    secrets: inherit

  # Run tests on multiple Node.js versions
  test-matrix:
    name: Test Matrix
    uses: ./.github/workflows/test-matrix.yml
    secrets: inherit

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run security audit
        run: |
          echo "Running security audit for all projects..."
          
          # Backend security audit
          cd backend
          npm ci
          npm audit --audit-level moderate
          
          # Frontend security audit
          cd ../frontend
          npm ci
          npm audit --audit-level moderate

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [tests, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          
          # Check backend build
          if [ -d "backend/dist" ]; then
            echo "✅ Backend build successful"
            ls -la backend/dist/
          else
            echo "❌ Backend build failed"
            exit 1
          fi
          
          # Check frontend build
          if [ -d "frontend/dist" ]; then
            echo "✅ Frontend build successful"
            ls -la frontend/dist/
          else
            echo "❌ Frontend build failed"
            exit 1
          fi

  # Summary
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [tests, code-quality, test-matrix, security, build-verification]
    if: always()

    steps:
      - name: Pipeline Summary
        run: |
          echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests & Linting | ${{ needs.tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.tests.result }}" = "success" ] && [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.test-matrix.result }}" = "success" ] && [ "${{ needs.security.result }}" = "success" ] && [ "${{ needs.build-verification.result }}" = "success" ]; then
            echo "## ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
            echo "The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some checks failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed jobs before proceeding." >> $GITHUB_STEP_SUMMARY
          fi
